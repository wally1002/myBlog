<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="wally1002.github.io/myBlog/feed.xml" rel="self" type="application/atom+xml" /><link href="wally1002.github.io/myBlog/" rel="alternate" type="text/html" /><updated>2021-08-11T00:06:27+05:30</updated><id>wally1002.github.io/myBlog/feed.xml</id><title type="html">Interstellar</title><subtitle>My Blog.</subtitle><author><name>Sankeerth</name><email>sankeerthreddy1002@gmail.com</email></author><entry><title type="html">I, Robot</title><link href="wally1002.github.io/myBlog/books/I,Robot/" rel="alternate" type="text/html" title="I, Robot" /><published>2021-08-10T00:00:00+05:30</published><updated>2021-08-10T00:00:00+05:30</updated><id>wally1002.github.io/myBlog/books/I,Robot</id><content type="html" xml:base="wally1002.github.io/myBlog/books/I,Robot/">&lt;h2 id=&quot;--isaac-asimov&quot;&gt;- Isaac Asimov&lt;/h2&gt;

&lt;p&gt;I’ve got to admit I was hugely surprised by the stories. Each one was outstanding. It definitely ranks in my top 5(at least until I read all of the Asimov works). 9 stories but each exploring some queer little aspect of the robots. As I want to be a robotics and AI engineer, I absolutely loved the dilemma’s the book creates. Let me go through each story.&lt;/p&gt;

&lt;h3 id=&quot;robbie&quot;&gt;Robbie&lt;/h3&gt;

&lt;p&gt;I personally thought this was the best way to start the series of stories. It starts off with a very human perspective of what robots are and can be. Robbie’s relation with the girl is was explored in a concise but touching manner. This story being at the beginning of the Robot’s rise gives us a chance to examine robots from humans’ perspective. They are still doubtful about the Robot’s calibre and emotional status.&lt;/p&gt;

&lt;h3 id=&quot;runaround&quot;&gt;Runaround&lt;/h3&gt;

&lt;p&gt;Runaround gives us the mechanical and Engineer’s perspective of the Robot’s behaviours. Every action derived from the three laws and their order of precedence and superiority was intriguing and fun to read. Unlike &lt;strong&gt;Robbie&lt;/strong&gt;, we are not dealt with the emotional or psychological views of or about the Robot.&lt;/p&gt;

&lt;h3 id=&quot;reason&quot;&gt;Reason&lt;/h3&gt;

&lt;p&gt;Reason as the title suggests delves more into the reasoning of the robots. How they start to perceive things by just rationale alone. The story absolutely dissolves everything we believe as absolute just by logic. At one point, it feels like is this the crossing point for them? Will they break the laws? Alas, it’s just the reason for the robots. It’s convincing yet breaks all of our concrete assumptions of the universe we created around ourselves.&lt;/p&gt;

&lt;h3 id=&quot;catch-the-rabbit&quot;&gt;Catch the Rabbit&lt;/h3&gt;

&lt;p&gt;Catch the Rabbit is yet another view of the dilemma robots face when thrown into the loopholes between each of the laws. Though it felt slightly similar to &lt;strong&gt;Runaround&lt;/strong&gt;, it explores a different corner of the laws of robotics. Probably my least liked the story of all.&lt;/p&gt;

&lt;h3 id=&quot;liar&quot;&gt;Liar!&lt;/h3&gt;

&lt;p&gt;Liar! Caught me by surprise. The earlier 3 stories give us the view from the Engineer’s point of view but Liar! Shifts it to the Psychological or Emotional point of view. Yet another standpoint on the laws of robotics, we can feel the subtlety of this story more than the others. It plays with our human mindset. It gives us what we want and surprises us at the end.&lt;/p&gt;

&lt;h3 id=&quot;little-lost-robot&quot;&gt;Little Lost Robot&lt;/h3&gt;

&lt;p&gt;My favourite of the lot. Maybe second favourite. I can’t decide. Here the situation’s a little different. We have a modified law here. We are dealing with a slightly unknown situation than we have sold before. What makes this special is that we explore the case from both an emotional and engineering standpoint. How both are used to identify the lost Robot.&lt;/p&gt;

&lt;h3 id=&quot;escape&quot;&gt;Escape!&lt;/h3&gt;

&lt;p&gt;Escape felt queer. Queerer than all of the others. Here we deal with not a robot but just a brain. The Brain is capable of almost anything. Yet, the characters are faced with a question that can break down the Brain because of the dilemma it creates between the Robot’s standpoint on the laws. When everything feels so queer, we get the revelation that it’s just a……(read the book)&lt;/p&gt;

&lt;h3 id=&quot;evidence&quot;&gt;Evidence&lt;/h3&gt;

&lt;p&gt;So if &lt;strong&gt;Little Lost Robot&lt;/strong&gt; comes second in my favourites, this would go first. Another weird standpoint on robots. It’s fantastic that there are almost none to zero robots in the story, or were they?? I just can’t write anything on this cause it will definitely spoil the story. The last paragraph of the story is absolute gold.&lt;/p&gt;

&lt;h3 id=&quot;the-evitable-conflict&quot;&gt;The Evitable Conflict&lt;/h3&gt;

&lt;p&gt;Probably the most boring of the lot but gives us lots of insights into the world the stories are situated in. Maybe this contradicts the &lt;strong&gt;Evidence&lt;/strong&gt; in some way, but I intend to leave it there. It sets up and concludes the robots and their thinking and strategies in a neat little way.&lt;/p&gt;

&lt;p&gt;We do get to spend some time with 3 of the recurring characters. &lt;strong&gt;Susan Calvin&lt;/strong&gt;, the robot-psychologist, had the best roles(she is the narrator for almost all in a pseudo way). &lt;strong&gt;Powell&lt;/strong&gt; and &lt;strong&gt;Donovan&lt;/strong&gt; were given space in 4 stories and were good enough for us to look for them. But as the books are primarily about Robots and their psychology, we often can’t care for these characters as in other books. Still, this was an enthralling ride for someone who knows what robots can be capable of and what makes them so unique.&lt;/p&gt;</content><author><name>Sankeerth</name><email>sankeerthreddy1002@gmail.com</email></author><category term="books" /><category term="Isaac Asimov" /><category term="Sci-fi" /><category term="books" /><summary type="html">- Isaac Asimov</summary></entry><entry><title type="html">Ind vs Eng Day 5 of 1st Test</title><link href="wally1002.github.io/myBlog/cricket/Day5_Test1/" rel="alternate" type="text/html" title="Ind vs Eng Day 5 of 1st Test" /><published>2021-08-09T00:00:00+05:30</published><updated>2021-08-09T00:00:00+05:30</updated><id>wally1002.github.io/myBlog/cricket/Day5_Test1</id><content type="html" xml:base="wally1002.github.io/myBlog/cricket/Day5_Test1/">&lt;h3 id=&quot;rain-rain-never-went-away&quot;&gt;Rain, Rain never went away.&lt;/h3&gt;
&lt;p&gt;There’s nothing to write. Except ofcourse Rain deserved the Player of the Match award. It’s just so frustrating to see a poised match get abandoned. It’s just depressing. India had the best chance to win the match and start the series in a great way, but that wasn’t to be done. A win would have increased the India’s chances of winning the series by a great margin. Alas that wasn’t the case. Instead of crying, let’s get over it and hope for a non-rain-interrupted match at the Lord’s.&lt;/p&gt;</content><author><name>Sankeerth</name><email>sankeerthreddy1002@gmail.com</email></author><category term="cricket" /><category term="India" /><category term="England" /><category term="Test" /><summary type="html">Rain, Rain never went away. There’s nothing to write. Except ofcourse Rain deserved the Player of the Match award. It’s just so frustrating to see a poised match get abandoned. It’s just depressing. India had the best chance to win the match and start the series in a great way, but that wasn’t to be done. A win would have increased the India’s chances of winning the series by a great margin. Alas that wasn’t the case. Instead of crying, let’s get over it and hope for a non-rain-interrupted match at the Lord’s.</summary></entry><entry><title type="html">Ind vs Eng Day 4 of 1st Test</title><link href="wally1002.github.io/myBlog/cricket/Day4_Test1/" rel="alternate" type="text/html" title="Ind vs Eng Day 4 of 1st Test" /><published>2021-08-08T00:00:00+05:30</published><updated>2021-08-08T00:00:00+05:30</updated><id>wally1002.github.io/myBlog/cricket/Day4_Test1</id><content type="html" xml:base="wally1002.github.io/myBlog/cricket/Day4_Test1/">&lt;h3 id=&quot;root-and-the-runs&quot;&gt;Root and the Runs&lt;/h3&gt;
&lt;p&gt;Runs flowed, not just from Root’s bat but from almost everyone. Siraj did well Burns out for the delivery I always wanted him to bowl. Bumrah trapped Crawley and it was fairly simple. Then came the vigil. Sibley blunting it out from one end and Root crunching through the other. In a partnership of around 75 sibley just scored 18-20 runs which asserts the dominance at which Root played. He was gifted many boundary deliveries and was not missing out on them. Sibley did get out to a loose shot but he hung around enough for his captain to score. Bairstow came and crunched some and pulled to straight to Jadeja. Then come’s the time for our &lt;strong&gt;Lord Shardul&lt;/strong&gt;. He gives away 10 runs and then corrects his line. Bang there’s the wicket. Then Buttler chose probably the worst delivey to leave and gets back. Sam Curran start’s to smash and adds those handy runs down the order which he always does. Root perishes and India quickly wrap up the tail.&lt;/p&gt;

&lt;h3 id=&quot;bumrah-bumrah-and-bumrah&quot;&gt;Bumrah, Bumrah and Bumrah&lt;/h3&gt;
&lt;p&gt;Shami’s line and length fell apart after the first spell. Siraj was gifting boundary deliveries at a consistent pace. Jadeja was just bowling. Shardul to my opinion was severly underbowled. With all this going around him Bumrah still produced the match-winning spell again. Got rid of Crawley early. When the partnership started growing he took out Sibley just after lunch, then came back at the fag end to create the fag end. Took the new ball and dismantled the English lineup that was left. Got Root to a beautiful delivery. Cramped Curran for room and forced him into an awkward shot. Gave no chance to Broad. I didn’t want shami to take the last wicket but he did. Bumrah deserved that 5 wicket haul and just missed out on a 10 wicket haul. He was well and truly the best bowler of the match(unless the always collapsing Indian batting collapses).&lt;/p&gt;

&lt;h3 id=&quot;chase-or-collapse&quot;&gt;Chase or Collapse&lt;/h3&gt;
&lt;p&gt;After all those failed 4th innings chases, I just can’t have confidence in this Indian team to chase down any kind of total. But we had a miracle at Gabba. A vigil at Sydney. I feel the situation is quite different. It seems the best day for batting unless ofcourse clouds interfere. Alas Rahul starts with a flurry of boundaries. Rohit is calm and just keeps blocking and nudging. Then comes the wicket. Rahul done his part. We got off to a decent start. Still the demons of Rohit gifting his wicket before end of play surface. It will be the constant demon chasing me until India chases the total. Rohit pulls but he keeps it down. Pulls again and keeps it down. &lt;em&gt;phew&lt;/em&gt;. Survived. Pujara had gifts thrown at him to push his strikerate close to 100 and caps off another good day for India. To Chase this the &lt;strong&gt;Chase Master&lt;/strong&gt; must come to the party.&lt;/p&gt;

&lt;h3 id=&quot;here-are-the-highlights&quot;&gt;Here are the Highlights&lt;/h3&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/TEzul8_JgaI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Sankeerth</name><email>sankeerthreddy1002@gmail.com</email></author><category term="cricket" /><category term="India" /><category term="England" /><category term="Test" /><summary type="html">Root and the Runs Runs flowed, not just from Root’s bat but from almost everyone. Siraj did well Burns out for the delivery I always wanted him to bowl. Bumrah trapped Crawley and it was fairly simple. Then came the vigil. Sibley blunting it out from one end and Root crunching through the other. In a partnership of around 75 sibley just scored 18-20 runs which asserts the dominance at which Root played. He was gifted many boundary deliveries and was not missing out on them. Sibley did get out to a loose shot but he hung around enough for his captain to score. Bairstow came and crunched some and pulled to straight to Jadeja. Then come’s the time for our Lord Shardul. He gives away 10 runs and then corrects his line. Bang there’s the wicket. Then Buttler chose probably the worst delivey to leave and gets back. Sam Curran start’s to smash and adds those handy runs down the order which he always does. Root perishes and India quickly wrap up the tail.</summary></entry><entry><title type="html">Ind vs Eng Day 3 of 1st Test</title><link href="wally1002.github.io/myBlog/cricket/Day3_Test1/" rel="alternate" type="text/html" title="Ind vs Eng Day 3 of 1st Test" /><published>2021-08-07T00:00:00+05:30</published><updated>2021-08-07T00:00:00+05:30</updated><id>wally1002.github.io/myBlog/cricket/Day3_Test1</id><content type="html" xml:base="wally1002.github.io/myBlog/cricket/Day3_Test1/">&lt;h3 id=&quot;jadeja-and-rahuls-class&quot;&gt;Jadeja and Rahul’s class&lt;/h3&gt;
&lt;p&gt;Rahul started where he left off. He added just 32 runs but stringed nearly 100+ runs in partnerships with Pant and Jadeja. While Pant’s approach did seem questionable, he did decrease the lead in short span and gave Rahul and Jadeja some time to settle in. Jadeja was superb. Played with caution till Rahul was present and then teed of the bowlers. If only he had believed more in our bowlers.&lt;/p&gt;

&lt;h3 id=&quot;lower-order-masterclass&quot;&gt;Lower Order MasterClass&lt;/h3&gt;
&lt;p&gt;Yesterday was all about India’s lower order. Can they string enough runs which will inturn decide the course of the match and also the series. Rahane said that the lower order is ready to contribute 20-30 runs everymatch and they did more than that today. Shami tonked a bit. scored some runs and gave Bumrah time to settle in. Then came the masterclass. The drive, The flick and The pull. Bumrah showed it all with a great defence and good leaving technique. Siraj hung in there and added some more valuable runs. If this fight can be counted from Indian lower-order we are in for a great series.&lt;/p&gt;

&lt;h3 id=&quot;anderson-and-robinson&quot;&gt;Anderson and Robinson&lt;/h3&gt;
&lt;p&gt;Having a son in your name means you have a great chance of taking wickets. England did went with 3.5 bowlers and paid the price by conceding too many lower order runs. Anderson and Robinson got tired after bowling extended spells. Broad was completely out of touch and Curran didn’t have enough overs under his belt to cause some trouble. They both were going at excess of 3.5 RPO and Indian batters did well to cash in on their bowling.&lt;/p&gt;

&lt;h3 id=&quot;englands-batting&quot;&gt;England’s batting&lt;/h3&gt;
&lt;p&gt;The ball did stop doing much during the later stages of Indian innings and was evident in the 3rd innings as well. They looked comfortable at the crease and Indian bowlers were not so accurate as the 1st innings. Weather forecast is dodgy but if we can scratch out aound 100 overs then we are in for a great contest. Considering India’s poor 4th innings record 120-130 might prove good enough.&lt;/p&gt;

&lt;h3 id=&quot;here-are-the-highlights&quot;&gt;Here are the Highlights&lt;/h3&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/lOB84rmkmnY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Sankeerth</name><email>sankeerthreddy1002@gmail.com</email></author><category term="cricket" /><category term="India" /><category term="England" /><category term="Test" /><summary type="html">Jadeja and Rahul’s class Rahul started where he left off. He added just 32 runs but stringed nearly 100+ runs in partnerships with Pant and Jadeja. While Pant’s approach did seem questionable, he did decrease the lead in short span and gave Rahul and Jadeja some time to settle in. Jadeja was superb. Played with caution till Rahul was present and then teed of the bowlers. If only he had believed more in our bowlers.</summary></entry><entry><title type="html">Ind vs Eng Day 2 of 1st Test</title><link href="wally1002.github.io/myBlog/cricket/Day2_Test1/" rel="alternate" type="text/html" title="Ind vs Eng Day 2 of 1st Test" /><published>2021-08-06T00:00:00+05:30</published><updated>2021-08-06T00:00:00+05:30</updated><id>wally1002.github.io/myBlog/cricket/Day2_Test1</id><content type="html" xml:base="wally1002.github.io/myBlog/cricket/Day2_Test1/">&lt;h3 id=&quot;rohit-sharma-throws-it-away&quot;&gt;Rohit Sharma throws it away&lt;/h3&gt;
&lt;p&gt;Rohit was looking so solid until his ball came along. He is the best contemporary puller and he falls for it. He has got out in similar way in 2 of the last 4 away tests. He is looking good and when we start to think that he might make a big one, he perishes for a ball he should’t have. Would he got out to a ball around off like Pujara we wouldn’t have been feeling this sad. Hope he makes a big one in this series.&lt;/p&gt;

&lt;h3 id=&quot;rahul-stands-out&quot;&gt;Rahul stands out&lt;/h3&gt;
&lt;p&gt;Rahul played a bit more freely than Rohit. He had more edges but you got to take the risk to score. He will be key for India to get into substantial lead. This is his chance to show his strength. Pant and the ball is in the air(The last line was suggested by Github Copilot so it knows Pant and ball is in the air is a must). He looked good with that stroke of Broad to the boundary.&lt;/p&gt;

&lt;h3 id=&quot;indian-middle-order&quot;&gt;Indian Middle Order&lt;/h3&gt;
&lt;p&gt;This is yet another day where Indian batting failed to take control of the match and the middle order is to be blamed. The most experienced trio of Pujara, Kohli and Rahane have got out in ways we don’t want to see. Pujara has that ever present nemesis of the ball around off-stump. He will definitely get a ball with his name on it around the off stump corridor. The last things I wanted to see this series was Kohli pushing hard at a 5th stump line delivery. He could have left it. The conditions suggested Anderson would be on fire. He let go of a great opportunity to start the series on a great note. Then comes Rahane. Admist all the chaos he gets himself runout. What’s worse than that? The ball didn’t even left the pitch but he was half-way down. It’s ridiculous. This is a make or break series for India’s 3 and 5.&lt;/p&gt;

&lt;h3 id=&quot;anderson-again&quot;&gt;Anderson again&lt;/h3&gt;
&lt;p&gt;Broad looked toothless. Curran offered more freebies than not. Robinson’s ball never looked like it would have hit the stumps. It was Anderson again. The weather conspiring with him to break India’s hope of a substantial lead in just a matter of two ballls. It’s his never-ending over that will start either a collapse or fightback for the third day.&lt;/p&gt;

&lt;h3 id=&quot;here-are-the-highlights&quot;&gt;Here are the highlights&lt;/h3&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/k55EKbosISA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Sankeerth</name><email>sankeerthreddy1002@gmail.com</email></author><category term="cricket" /><category term="India" /><category term="England" /><category term="Test" /><summary type="html">Rohit Sharma throws it away Rohit was looking so solid until his ball came along. He is the best contemporary puller and he falls for it. He has got out in similar way in 2 of the last 4 away tests. He is looking good and when we start to think that he might make a big one, he perishes for a ball he should’t have. Would he got out to a ball around off like Pujara we wouldn’t have been feeling this sad. Hope he makes a big one in this series.</summary></entry><entry><title type="html">Ind vs Eng Day 1 of 1st Test</title><link href="wally1002.github.io/myBlog/cricket/Day1_Test1/" rel="alternate" type="text/html" title="Ind vs Eng Day 1 of 1st Test" /><published>2021-08-05T00:00:00+05:30</published><updated>2021-08-05T00:00:00+05:30</updated><id>wally1002.github.io/myBlog/cricket/Day1_Test1</id><content type="html" xml:base="wally1002.github.io/myBlog/cricket/Day1_Test1/">&lt;h3 id=&quot;jasprit-bumrah-shines&quot;&gt;Jasprit Bumrah shines&lt;/h3&gt;
&lt;p&gt;Bumrah was missing on form in last few months coming back from the 
injury. He had showed us what he can do on his day. Started of 
brilliantly setting up Rory Burns with a series of leaving deliveries and with the one that comes back in. Buttler’s wicket was pure effort. Denying him a run for a strech of 17 balls then prising out his wicket to a 5th stump line all is so great to watch. Then came the trademark &lt;strong&gt;Toe-Crushing&lt;/strong&gt; yorkers to send back England’s leading wicket takers.&lt;/p&gt;

&lt;p&gt;Shami who was termed unlucky had a good time in the middle. Siraj had an off day but prized out the wicket of settled Crawley. Then comes &lt;strong&gt;Lord Shardul&lt;/strong&gt;(As we love to call him) and turns the match upside down in a matter of 5 balls.&lt;/p&gt;

&lt;h3 id=&quot;joe-root-and-the-english-batting&quot;&gt;Joe Root and The English batting&lt;/h3&gt;
&lt;p&gt;It’s as simple as the title suggests. Joe Root was fluent and scored fast until undone by a good ball from Thakur. Crawley and Bairstow looked good in parts and were dismissed to good deliveries. Everyone else lacked fight except Curran. He did give scares of 2018 but India smartly chipped away the wickets from the other end denying him the runs.&lt;/p&gt;

&lt;h3 id=&quot;survival-of-the-two-rs&quot;&gt;Survival of the two R’s&lt;/h3&gt;
&lt;p&gt;Rohit and Rahul were comfortable with Broad and Anderson. Robinson gave some scares to Rohit and hit the pad often. Rahul looked to dominate Curran and almost fell into the trap. India should make the most of the first hour of tomorrow. Rohit has a chance begging for him to score. Lead of 150+ would give India the best chance of winning this test.&lt;/p&gt;

&lt;h3 id=&quot;here-are-the-highlights&quot;&gt;Here are the highlights&lt;/h3&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube-nocookie.com/embed/dYFG8mOoYfY&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name>Sankeerth</name><email>sankeerthreddy1002@gmail.com</email></author><category term="cricket" /><category term="India" /><category term="England" /><category term="Test" /><summary type="html">Jasprit Bumrah shines Bumrah was missing on form in last few months coming back from the injury. He had showed us what he can do on his day. Started of brilliantly setting up Rory Burns with a series of leaving deliveries and with the one that comes back in. Buttler’s wicket was pure effort. Denying him a run for a strech of 17 balls then prising out his wicket to a 5th stump line all is so great to watch. Then came the trademark Toe-Crushing yorkers to send back England’s leading wicket takers.</summary></entry><entry><title type="html">Ind vs Eng Preview</title><link href="wally1002.github.io/myBlog/cricket/IndvsEng/" rel="alternate" type="text/html" title="Ind vs Eng Preview" /><published>2021-08-04T00:00:00+05:30</published><updated>2021-08-04T00:00:00+05:30</updated><id>wally1002.github.io/myBlog/cricket/IndvsEng</id><content type="html" xml:base="wally1002.github.io/myBlog/cricket/IndvsEng/">&lt;div style=&quot;text-align: center&quot;&gt; 
    &lt;h1&gt;IND vs ENG 2021&lt;/h1&gt; 
&lt;/div&gt;
&lt;h3 id=&quot;why-am-i-writing-this&quot;&gt;Why am I writing this?&lt;/h3&gt;

&lt;p&gt;I missed the last tour miserably. I was excited to be in College and forgot mostly about cricket. I missed all 3 overseas tours of 2018 and I regret it slightly. That is why I want to write as much as I can for this series.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/home/wally1002/Downloads/blog/myBlog/assets/images/indveng-0.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;series-preview-and-thoughts&quot;&gt;Series Preview and Thoughts&lt;/h3&gt;

&lt;p&gt;I don’t think India will win this but they will definitely put up a fight better than last series. Both the sides are hunting for the right balance as India miss the services of an fast bowling allrounder and England missing Stokes.&lt;/p&gt;

&lt;p&gt;This series is great oppurtunity for Rohit Sharma to shut the critics about his red ball record. Siraj should definitely play more than 3 matches. He will be key with many left handers in England lineup. Ashwin will also be crucial with both bat and ball.  Pujara, Rahane, Virat, Bumrah, Ishant and Shami have a point to prove.&lt;/p&gt;

&lt;p&gt;​	For England the key would be bowling with swing from Anderson and Broad and pace from Wood and Robinson. Mostly they would leave out Leach for extra batting option which burdens Root to bowl more. Batting maybe the weak link but return of Buttler and Bairstow may help them.&lt;/p&gt;

&lt;p&gt;​	Final scoreline may favour 3-2 with England winning. Leading Run Scorer maybe Rohit Sharma and Leading wicket taker Wood/Shami.&lt;/p&gt;

&lt;h3 id=&quot;predicted-xis&quot;&gt;Predicted XI’s&lt;/h3&gt;

&lt;p&gt;​	&lt;strong&gt;India&lt;/strong&gt; - Virat Kohli(C), Rohit Sharma, KL Rahul, Pujara, Rahane, Pant(wk), Jadeja, Ashwin, Shami, Bumrah, Siraj.&lt;/p&gt;

&lt;p&gt;​	&lt;strong&gt;England&lt;/strong&gt; - Root(C), Burns, Sibley, Crawley, Bairstow, Lawrence, Buttler(wk), Sam Curran, Wood, Broad, Anderson.&lt;/p&gt;

&lt;p&gt;​	Hope I will continue to write and more and cherish this series as none other.&lt;/p&gt;</content><author><name>Sankeerth</name><email>sankeerthreddy1002@gmail.com</email></author><category term="cricket" /><category term="India" /><category term="England" /><category term="Test" /><summary type="html">IND vs ENG 2021 Why am I writing this?</summary></entry><entry><title type="html">Move the turtle</title><link href="wally1002.github.io/myBlog/tech/Movetheturtle/" rel="alternate" type="text/html" title="Move the turtle" /><published>2021-07-12T00:00:00+05:30</published><updated>2021-07-12T00:00:00+05:30</updated><id>wally1002.github.io/myBlog/tech/Movetheturtle</id><content type="html" xml:base="wally1002.github.io/myBlog/tech/Movetheturtle/">&lt;h2 id=&quot;move-the-turtle&quot;&gt;Move the turtle&lt;/h2&gt;

&lt;p&gt;In the previous post we controlled the turtle using our keys, but we may want to automate this process by writing a piece of code which tells the turtle to move in a specified manner. There are 2 ways of controlling it using code. One is through command line using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic pub&lt;/code&gt; and other is using a python/c++ code. We will start with the command line one.&lt;/p&gt;

&lt;h3 id=&quot;rostopic-pub-through-command-line&quot;&gt;Rostopic pub through command line&lt;/h3&gt;

&lt;p&gt;We have already seen &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic list&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic info&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic echo&lt;/code&gt;. Adding to that stack of commands will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic pub&lt;/code&gt;. This command helps us publish the data onto a rostopic from terminal itself. Remember the rostopic which the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleop&lt;/code&gt; node published in the previous tutorial? It’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/turtle1/cmd_vel&lt;/code&gt;. We will now publish a message directly to this topic from command line.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roscore&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;New terminal -&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rosrun turtlesim turtlesim_node&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A small trick is to use tab auto complete in terminal. Type something incompletely and press tab key once, If an unambiguous choice is present it will fill it otherwise it doesn’t change anything. If you press the tab key twice you can see all the suggestions. This will be helpful in filling out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic pub&lt;/code&gt; command. Whenever you see things filling out without me typing I’m using tab key to auto complete.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic pub &amp;lt;topic name&amp;gt; &amp;lt;message type&amp;gt; &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Usually after filling out topic name press tab key twice. It will auto fill message type and message. Then edit the message to your requirements.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/rostopic_pub_single.gif?raw=true&quot; alt=&quot;rostopic_pub_single&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Edit the linear velocities in x, y directions and observe. As you can see the turtle stopped after sometime, it’s because we only sent a single message. Some times we need to send messages continuously. This is where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-r&lt;/code&gt; flag helps us. It means repeatedly. The command structure will be&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic pub -r &amp;lt;frequency of messages&amp;gt; &amp;lt;topic name&amp;gt; &amp;lt;message type&amp;gt; &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/rostopic_pub_rec.gif?raw=true&quot; alt=&quot;rostopic_pub_rec&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the GIF we are sending 1 message per second. We can increase the frequency if needed. This concludes discussion on rostopics. Now let’s move turtle to a given location.&lt;/p&gt;

&lt;h3 id=&quot;move-through-code&quot;&gt;Move through Code&lt;/h3&gt;

&lt;p&gt;Now we will write a python code encompassing all the ideas we discussed. I’m assuming little knowledge of python. First we need to create a file in the scripts directory of our tutorials package.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd ~/catkin_ws/src/tutorials/scripts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;touch control.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod +x control.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you can open the file and edit in your favourite editor. The last command makes your file executable so we can run it as a rosnode. I will paste the whole code here then dissect it to the bits.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rospy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;geometry_msgs.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Twist&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;turtlesim.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pose&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atan2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TurtleBot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'turtlebot_controller'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anonymous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;velocity_publisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/turtle1/cmd_vel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Twist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose_subscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/turtle1/pose'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Callback function which is called when a new message of type Pose is received by the 				 	   subscriber.&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;euclidean_distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Euclidean distance between current pose and the goal.&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;steering_angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Angle which the turtle needs to rotate to align with the goal position.&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atan2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;linear_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Velocity as a linear function of the distance to be moved. Velocity = K * Distance&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;euclidean_distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;angular_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Angular velocity at which the turtle has to rotate to align with goal position&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;steering_angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move2goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Moves the turtle to the goal.&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Set your x goal: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Set your y goal: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;distance_tolerance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Set your tolerance: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Twist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;euclidean_distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance_tolerance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            
            &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angular_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;velocity_publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            
        &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;velocity_publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TurtleBot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move2goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROSInterruptException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now let’s breakdown the code.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env python
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above line specifies the python interpreter version for the code.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#import libraries
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rospy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;geometry_msgs.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Twist&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;turtlesim.msg&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pose&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atan2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;rospy is python package for writing code we can connect to ros. geometry_msgs are msg class which contain several msgs. Twist is a velocity msg type containing 6 values which are 3 Linear velocities, 3 angular velocities. Pose message has x, y, theta with x axis, linear velocity, angular velocity. Rest are math functions for calculations.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TurtleBot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Creates a node with name 'turtlebot_controller' and make sure it is a unique node (using 						anonymous=True).
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'turtlebot_controller'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;anonymous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Publisher which will publish to the topic '/turtle1/cmd_vel' of type Twist with a queue of 10 msgs.
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;velocity_publisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/turtle1/cmd_vel'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Twist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# A subscriber to the topic '/turtle1/pose' with msg type Pose. self.update_pose is called when a 			    message of type Pose is received.
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose_subscriber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/turtle1/pose'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                &lt;span class=&quot;n&quot;&gt;Pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# set the pose variable
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# set rospy rate which is used for specifing the publishing rate
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Define a class for a turtle with all the functions needed. In the constructor(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__&lt;/code&gt;) of the class we define our publishers and subscribers. First we initialise our node using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rospy.init_node&lt;/code&gt; which gives our node a name and unique identifier using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;anonymous&lt;/code&gt; flag. Then we define our velocity publisher using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rospy.Publisher(&amp;lt;topic name&amp;gt;, &amp;lt;msg type&amp;gt;, queue_size=)&lt;/code&gt;. Here our topic name is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/turtle1/cmd_vel&lt;/code&gt; which has a msg type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Twist&lt;/code&gt;(try to find out how?). They we define a pose subscriber using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rospy.Subscriber(&amp;lt;topic name&amp;gt;, &amp;lt;msg type&amp;gt;, &amp;lt;callback function&amp;gt;)&lt;/code&gt;. Subscribers have a callback function which is called whenever we receive a new msg to the topic. We define a pose variable to store our pose value. rate stores the frequency at which we will publish our msg, this can be set using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rospy.Rate(&amp;lt;value&amp;gt;)&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Callback function which is called when a new message of type Pose is received by the 				 	   subscriber.&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# store the pose msg in pose variable
&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# round of x, y to 4 decimal places
&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above function is the callback function for the subscriber we have written. It takes the data from the topic, It stores the data in pose variable, then rounds off x, y to 4 decimal places.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;euclidean_distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Euclidean distance between current pose and the goal.&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;steering_angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Angle which the turtle needs to rotate to align with the goal position.&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atan2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;linear_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Velocity as a linear function of the distance to be moved. Velocity = K * Distance&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;euclidean_distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;angular_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Angular velocity at which the turtle has to rotate to align with goal position&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;steering_angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s look at an image first. In the image we can see a goal position in  a X-Y coordinate system. $\theta$ is the steering angle we calculate using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steering_angle&lt;/code&gt; function. The distance between turtle and goal position is calculated using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;euclidean_distance&lt;/code&gt; function. It’s very simple math.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/goal_turtle.png?raw=true&quot; alt=&quot;goal_turtle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have established the variables we want to use to steer the turtle to the goal let’s use them. To control the turtle we used what’s called as a Proportional Controller. It will be of form $y = K_p * x$  where $y$ is the variable we want to control and $x$ is the variable we have. $K_p$ is the called the proportional gain. So here $x$ is $\theta$, $d$ for two $y$’s which are $V_x$ and $\omega_z$. This is really intuitive. Let’s say if we have a large steering angle then we may want to adjust it quickly, this is what the proportional controller does. If input is large then output is large and vice-versa. So the equations we have are&lt;/p&gt;

&lt;p&gt;\(\begin{align*}
	V_x = K_{p1} * d \\
	\omega_x = K_{p2} * \theta \\
\end{align*}\)
The above $V_x$ and $\omega_z$ are calculated using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linear_vel&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;angular_vel&lt;/code&gt; functions. Now that we have these values the only remaining step is publishing these values to the topic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/turtle1/cmd_vel&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move2goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Moves the turtle to the goal.&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# define a goal position msg
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Get the input from the user.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Set your x goal: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Set your y goal: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Please, insert a number slightly greater than 0 (e.g. 0.01).
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;distance_tolerance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Set your tolerance: &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# define a velocity msg which needs to be published
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Twist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# If we are not within the distance tolerance limit then apply the controller. 
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;euclidean_distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;distance_tolerance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Porportional controller.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# https://en.wikipedia.org/wiki/Proportional_control
&lt;/span&gt;        
        &lt;span class=&quot;c1&quot;&gt;# Set the velocities calculated in the above functions. 
&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Linear velocity in the x-axis.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Angular velocity in the z-axis.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angular_vel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;goal_pose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Publishing our vel_msg 
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;velocity_publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# Publish at the desired rate.
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Stopping our robot after the movement is over.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;velocity_publisher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vel_msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# If we press control + C, the node will stop.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move2goal&lt;/code&gt; is the main piece of code which calls all the other functions and steers it to the goal. We take 3 inputs which are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x goal, y goal, tolerance&lt;/code&gt;. Tolerance is the error which we can tolerate, so keep it’s value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;0.3&lt;/code&gt;(try other values and see what happens) . If our distance to the goal position is greater than tolerance we have to move, otherwise we break out of the while loop and stop our turtle. Now we will set the velocities $V_x$ and $\omega_z$ to the velocity msg. Then we will publish it using  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;velocity_publisher.publish(vel_msg)&lt;/code&gt;. The rate of publish is using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rate.sleep()&lt;/code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rate&lt;/code&gt; variable defined. After breaking out of the while loop we need to stop the turtle so we publish a zero velocity msg. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rospy.spin()&lt;/code&gt; lets us terminate the program using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctrl + C&lt;/code&gt; in the terminal.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# this is our main function which will call the other functions. 
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Instantiate our Turtle class
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TurtleBot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Give it a move goal command.
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move2goal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# If there is an interruption pass it and continue. 
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rospy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROSInterruptException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This above piece of code is where we call everything we written. So &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if __name__ == '__main__':&lt;/code&gt; executes our program. If you want to know more on this watch this &lt;a href=&quot;https://www.youtube.com/watch?v=sugvnHA7ElY&quot;&gt;video&lt;/a&gt;. We instantiate our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TurtleBot&lt;/code&gt; class then call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move2goal&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/move2goal.gif?raw=true&quot; alt=&quot;move2goal&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So that is it. This is how we can control a robot in simulator using code. I tried to split everything into modules and asses them individually. So if you have any doubts you can ping me anytime!.&lt;/p&gt;</content><author><name>Sankeerth</name><email>sankeerthreddy1002@gmail.com</email></author><category term="tech" /><category term="Python" /><category term="Robotics" /><category term="ROS" /><summary type="html">Move the turtle</summary></entry><entry><title type="html">Turtlesim</title><link href="wally1002.github.io/myBlog/tech/Turtlesim/" rel="alternate" type="text/html" title="Turtlesim" /><published>2021-07-11T00:00:00+05:30</published><updated>2021-07-11T00:00:00+05:30</updated><id>wally1002.github.io/myBlog/tech/Turtlesim</id><content type="html" xml:base="wally1002.github.io/myBlog/tech/Turtlesim/">&lt;h2 id=&quot;turtlesim&quot;&gt;Turtlesim&lt;/h2&gt;

&lt;p&gt;We now  understand the core ideas discussed in the previous post using a 2D simulator called Turtlesim. We will explore the ideas of topics, messages and nodes. Let’s get started.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/turtlesim.png?raw=true&quot; alt=&quot;startTsim&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;getting-started-with-turtlesim&quot;&gt;Getting started with Turtlesim&lt;/h3&gt;

&lt;p&gt;Turtlesim is a package which is included in ROS. So to use the Turtlesim we first need to start ROS. To start ROS we use the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roscore&lt;/code&gt; which starts all necessary processes for ROS. So open a new terminal and type in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roscore&lt;/code&gt;. Then to start the the turtlesim node we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rosrun turtlesim turtlesim_node&lt;/code&gt; in a new terminal. The structure of this command is such that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rosrun &amp;lt;package name&amp;gt; &amp;lt;node name&amp;gt;&lt;/code&gt;. Here our package is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;turtlesim&lt;/code&gt; and node is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;turtlesim_node&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Run the following commands.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roscore&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In a new terminal&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rosrun turtlesim turtlesim_node&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/startTsim.gif?raw=true&quot; alt=&quot;startTsim&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;move-the-turtle&quot;&gt;Move the Turtle!&lt;/h3&gt;

&lt;p&gt;Now that we have our turtle ready, next step will be to move it. We can control the turtle using our keyboard keys by starting another rosnode named  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;turtle_teleop_key&lt;/code&gt;. We need to have two terminals from the previous section running to control the turtle.&lt;/p&gt;

&lt;p&gt;In a new terminal&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rosrun turtlesim turtle_teleop_key&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/teleop.gif?raw=true&quot; alt=&quot;teleop&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see we can move the turtle seamlessly in the simulator. We could also see that whenever turtle hits a wall it sends a message in the other terminal. And to control the turtle the cursor must be on the 3rd terminal that is where we ran our control node. So what’s happening under the hood? How is the turtle moving? Here is where we use RQT graph to know what’s going on.&lt;/p&gt;

&lt;h3 id=&quot;understanding-rqt-graphs&quot;&gt;Understanding RQT Graphs&lt;/h3&gt;

&lt;p&gt;RQT graphs give an overview of our nodes, topics and how they are connected. You can start a rqt_graph using simple rosrun command like the previous cases. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rosrun rqt_graph rqt_graph&lt;/code&gt; starts a window where we can see the nodes and topics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/rqt_graph.png?raw=true&quot; alt=&quot;rqt_graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here oval shape means a node and box means a topic. so we used two nodes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;turtlesim&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleop_turtle&lt;/code&gt;(these we ran using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rosrun&lt;/code&gt; in previous sections). Here blue means it’s sending messages to a topic and green meaning it is receiving messages from a topic. the intermediary in the red is our topic. It is taking commands from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleop_turtle&lt;/code&gt;(our keyboard keys) and sending it out to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;turtlesim&lt;/code&gt;(simulator). Nodes which send data to a topic are called &lt;strong&gt;Publishers&lt;/strong&gt; and which take data are called &lt;strong&gt;Subscribers&lt;/strong&gt;. So what is this weird &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;turtle1/cmd_vel&lt;/code&gt; name for the topic? how to look into the data published into this topic? Let’s dive into rostopics…&lt;/p&gt;

&lt;h3 id=&quot;into-the-rostopics&quot;&gt;Into the rostopics&lt;/h3&gt;

&lt;p&gt;So first we may want to list all the rostopics which are running. For this we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic list&lt;/code&gt;, this gives us a list of rostopics running currently. So now we got the list we may want to see from where a specific topic(here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/turtle1/cmd_vel&lt;/code&gt;) is receiving data and where is it sending. Here we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic info &amp;lt;topic name&amp;gt;&lt;/code&gt; . For our case this command would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic info /turtle1/cmd_vel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/rostopic_info.gif?raw=true&quot; alt=&quot;rostopic_info&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we now see some weird names in the list of rostopics. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rosout&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rosout_agg&lt;/code&gt; are created when we run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;roscore&lt;/code&gt;. They handle some functionality of ROS which is not very useful for us. The other 3 topics are of importance for us. As we were looking at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/turtle1/cmd_vel&lt;/code&gt; we find out it’s info. In the info we can see 3 main sections. Type, Publishers and Subscribers. Here type is the message type of the topic. As we already noted from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rqt_graph&lt;/code&gt; the publisher is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;teleop_turtle&lt;/code&gt; and the subscriber is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;turtlesim&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we may want to inspect the data itself which is being published into the topics. For this we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic echo &amp;lt;topic name&amp;gt;&lt;/code&gt; and in our case it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic echo /turtle1/cmd_vel&lt;/code&gt;. You can note from the GIF that after we give an input through our keyboard we get ourselves data in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic echo&lt;/code&gt;. The data we see is the velocity of the turtle in 6DOF(Degrees Of Freedom). We gave a command to move the turtle forward we can see it only has linear velocity in x-direction. We will discuss this more later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/rostopic_echo.gif?raw=true&quot; alt=&quot;rostopic_echo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You may have observed a pattern here. To get anything related to a rostopic we are just using list, info, echo after it. This also applies for nodes, messages and others also.&lt;/p&gt;

&lt;p&gt;In the next post we will look into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rostopic pub&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/turtle1/pose&lt;/code&gt; topic and write a script to move the turtle to a given position from a python code…………..s&lt;/p&gt;</content><author><name>Sankeerth</name><email>sankeerthreddy1002@gmail.com</email></author><category term="tech" /><category term="Python" /><category term="Robotics" /><category term="ROS" /><summary type="html">Turtlesim</summary></entry><entry><title type="html">ROS</title><link href="wally1002.github.io/myBlog/tech/ROS/" rel="alternate" type="text/html" title="ROS" /><published>2021-07-10T00:00:00+05:30</published><updated>2021-07-10T00:00:00+05:30</updated><id>wally1002.github.io/myBlog/tech/ROS</id><content type="html" xml:base="wally1002.github.io/myBlog/tech/ROS/">&lt;h1 id=&quot;robotics&quot;&gt;Robotics&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Robotics is a very interesting word in itself. When you google Robot it says “Machine resembling human or replicating some human functions”. We human’s are ourselves very complex both biologically and psychologically. Yet we want to replicate something we don’t fully understand yet. For me this is where Robotics and AI stands out . With an aspiration of unknown magnitude and a limited understanding, researchers set out to unravel the Human form into Robots.&lt;/p&gt;

&lt;p&gt;So I think that should be quite a good intro. I will now move from philosophical things into the technical things. I want these posts to cover a lot of things like &lt;em&gt;Electronics, ML/ DL, Robotics&lt;/em&gt;. I will start off with ROS(Robot Operating System) and some small simulations, then move on to some other stuff. So let’s get going.&lt;/p&gt;

&lt;h2 id=&quot;ros&quot;&gt;ROS&lt;/h2&gt;

&lt;p&gt;ROS is a pseudo-operating system created to handle complex robots with many functions. ROS provides us with an interface to design modular systems with different functions. ROS is essentially a communication framework. Why ROS? This was the question I asked myself when I couldn’t find my way around ROS. Why? cause ROS lets us communicate between different nodes or codes written in different language for different devices. ROS unifies this process of communication. So let’s start with installing ROS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/logo_ros.jpg?raw=true&quot; alt=&quot;logo_ros&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;installing-ros&quot;&gt;Installing ROS&lt;/h3&gt;

&lt;p&gt;These instructions are only for Ubuntu 18.04 LTS operating system. You can dual-boot your system or run a virtual machine but prefer the former. We will be using ROS Melodic-Morenia. All the instructions can be found in official &lt;a href=&quot;http://wiki.ros.org/melodic/Installation/Ubuntu&quot;&gt;ROS website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Open a terminal and copy paste these sequentially and enter the password when needed. You will get to know everything as we move forward.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo sh -c 'echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &amp;gt; /etc/apt/sources.list.d/ros-latest.list'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt update&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install ros-melodic-desktop-full&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo &quot;source /opt/ros/melodic/setup.bash&quot; &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source ~/.bashrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install python-rosdep python-rosinstall python-rosinstall-generator python-wstool build-essential&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt install python-rosdep&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo rosdep init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rosdep update&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So as the installation is out of the way let’s get into core of the ROS.&lt;/p&gt;

&lt;h3 id=&quot;building-blocks-of-ros&quot;&gt;Building Blocks of ROS&lt;/h3&gt;

&lt;p&gt;ROS is about sending and receiving data. So it is maintained by three main structures, Nodes, Topics and Messages. The below figure illustrates how these are connected.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/core_ros.png?raw=true&quot; alt=&quot;image-20210509212618969&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;ROS NODES : Nodes are simply some code which needs data from other sources or generates data which needs to be sent to other nodes. For example camera is source of images, the raw data from sensor is processed on the camera itself and the image is formed. We now need to send the image to the processor so it can save and modify it. Here camera acts as a Node which sends(publishes) the data(image).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ROS MESSAGES : Messages are nothing but data containers. In ROS we have many different types of messages like int, float, image etc. The image data which we need to send from camera acts as a Message of type Image.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;ROS TOPICS : Topics are message carriers. So every message we send must go through a topic. So the Image message we need to send must go to a topic of some name(let’s say camera_data). So if we need that image we should write down a Node which takes data from this topic.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This brings us to Packages. Packages are simply a self contained project. Packages can be imported into another package and can be used. So the Nodes you write will be inside a package. Packages are self contained so you cannot nest them or add two packages with same name. Collection of different packages is in turn known as Workspace. So all the packages which we need to be working together should be in same workspace.&lt;/p&gt;

&lt;p&gt;There are many other important terms like Services, Parameters which will come later into the picture, so they can be introduced later. This essentially forms the core of ROS.&lt;/p&gt;

&lt;h3 id=&quot;creating-workspace-and-packages&quot;&gt;Creating Workspace and Packages&lt;/h3&gt;

&lt;p&gt;Let’s start by creating a directory . &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir&lt;/code&gt; creates a directory and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt; flag specifies that the directory we create is a parent directory.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir -p catkin_ws&lt;/code&gt;
Then move inside that directory is using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt;. Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; means change directory.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd catkin_ws&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Before creating a package we need a directory named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; in the workspace. This is where our packages are managed. 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd catkin_ws&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir src&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catkin build&lt;/code&gt; to manage our packages. This initialises our workspaces and creates a build and devel space for our packages and build them individually if present.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catkin build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then we need to source(setup) our workspace and this needs to be done every time we open the terminal. So to decrease our work we but the command into the bashrc file which runs every time we open a terminal&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo &quot;source ~/catkin_ws/devel/setup.bash&quot; &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/ws.gif?raw=true&quot; alt=&quot;output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s create a package with name &lt;strong&gt;tutorials&lt;/strong&gt;. For that we use the following command where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catkin_create_pkg&lt;/code&gt; creates the package named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tutorials&lt;/code&gt; with dependencies on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;geometry_msgs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rospy&lt;/code&gt;. So to create a package we should add the dependencies we require to run the code. Although they can be added and deleted after creating the package by editing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.xml&lt;/code&gt;.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd catkin_ws/src&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catkin_create_pkg tutorials geometry_msgs rospy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we need a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src&lt;/code&gt; folder in the package created. Then we need to build the package using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catkin build&lt;/code&gt; similar to the workspace. 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir src&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd ~/catkin_ws&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;catkin build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So we have our package ready to go. We can create a scripts folder inside your package to hold our codes. 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd ~/catkin_ws/src&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir tutorials/scripts&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/wally1002/tutorials/blob/main/media/package.gif?raw=true&quot; alt=&quot;package&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I think this will be it for this post and let’s look into a simulator called Turtlesim in the next post.&lt;/p&gt;</content><author><name>Sankeerth</name><email>sankeerthreddy1002@gmail.com</email></author><category term="tech" /><category term="Python" /><category term="Robotics" /><category term="ROS" /><summary type="html">Robotics</summary></entry></feed>